[
    {
      "ruleId": 6,
      "priority": 1,
      "description": "FXP - post /fxQuotes",
      "apiVersion": {
        "minorVersion": 1,
        "majorVersion": 2,
        "type": "mojaloop_connector_outbound",
        "asynchronous": false
      },
      "conditions": {
        "all": [
          {
            "fact": "operationPath",
            "operator": "equal",
            "value": "/fxQuotes"
          },
          {
            "fact": "method",
            "operator": "equal",
            "value": "post"
          }
        ]
      },
      "event": {
        "method": null,
        "path": null,
        "params": {
          "body": {
            "homeTransactionId": "homeTransactionId-123",
            "conversionTerms": {
              "conversionId": "{$request.body.conversionTerms.conversionId}",
              "determiningTransferId": "b51ec534-ee48-4575-b6a9-ead2955b8069",
              "initiatingFsp": "{$request.body.conversionTerms.initiatingFsp}",
              "counterPartyFsp": "{$request.body.conversionTerms.counterPartyFsp}",
              "amountType": "SEND",
              "sourceAmount": {
                "currency": "{$request.body.conversionTerms.sourceAmount.currency}",
                "amount": "{$environment.sourceAmountValue}"
              },
              "targetAmount": {
                "currency": "{$request.body.conversionTerms.targetAmount.currency}",
                "amount": "{$environment.targetAmountValue}"
              },
              "expiration": "{$request.body.conversionTerms.expiration}",
              "charges": [
                {
                  "chargeType": "string",
                  "sourceAmount": {
                    "currency": "{$request.body.conversionTerms.sourceAmount.currency}",
                    "amount": "1"
                  },
                  "targetAmount": {
                    "currency": "{$request.body.conversionTerms.targetAmount.currency}",
                    "amount": "30"
                  }
                }
              ]
            }
          },
          "statusCode": "200",
          "scripts": {
            "exec": [
              "const fxQuoteBody = JSON.parse(request.body)",
              "environment.sourceAmountValue = fxQuoteBody.conversionTerms.sourceAmount.amount || 10",
              "environment.targetAmountValue = fxQuoteBody.conversionTerms.targetAmount.amount || 300"
            ],
            "scriptingEngine": "javascript"
          }
        },
        "type": "FIXED_RESPONSE"
      },
      "type": "response",
      "version": 1
    },
    {
      "ruleId": 7,
      "priority": 1,
      "description": "FXP - post /fxTransfers response",
      "apiVersion": {
        "minorVersion": 1,
        "majorVersion": 2,
        "type": "mojaloop_connector_outbound",
        "asynchronous": false
      },
      "conditions": {
        "all": [
          {
            "fact": "operationPath",
            "operator": "equal",
            "value": "/fxTransfers"
          },
          {
            "fact": "method",
            "operator": "equal",
            "value": "post"
          }
        ]
      },
      "event": {
        "method": null,
        "path": null,
        "params": {
          "body": {
            "homeTransactionId": "{$request.body.homeTransactionId}",
            "completedTimestamp": "{$environment.completedTimestamp}",
            "conversionState": "RESERVED"
          },
          "statusCode": "200",
          "scripts": {
            "exec": [
              "environment.completedTimestamp = new Date().toISOString()"
            ],
            "scriptingEngine": "javascript"
          }
        },
        "type": "FIXED_RESPONSE"
      },
      "type": "response",
      "version": 1
    },
    {
      "ruleId": 8,
      "priority": 1,
      "description": "get /parties/{idType}/{idValue}",
      "apiVersion": {
        "minorVersion": 1,
        "majorVersion": 2,
        "type": "mojaloop_connector_outbound",
        "asynchronous": false
      },
      "conditions": {
        "all": [
          {
            "fact": "operationPath",
            "operator": "equal",
            "value": "/parties/{idType}/{idValue}"
          },
          {
            "fact": "method",
            "operator": "equal",
            "value": "get"
          }
        ]
      },
      "event": {
        "method": null,
        "path": null,
        "params": {
          "body": {
            "dateOfBirth": "1966-06-16",
            "displayName": "Yaro",
            "firstName": "Yaro",
            "fspId": "pm4mltest2",
            "idType": "MSISDN",
            "idValue": "{$request.params.idValue}",
            "lastName": "Smith",
            "merchantClassificationCode": "1234",
            "middleName": "",
            "kycInformation": "This is encrypted KYC information"
          },
          "statusCode": "200",
          "scripts": {
            "scriptingEngine": "postman"
          }
        },
        "type": "FIXED_RESPONSE"
      },
      "type": "response",
      "version": 1
    },
    {
      "ruleId": 9,
      "priority": 1,
      "description": "post /quoterequests",
      "apiVersion": {
        "minorVersion": 1,
        "majorVersion": 2,
        "type": "mojaloop_connector_outbound",
        "asynchronous": false
      },
      "conditions": {
        "all": [
          {
            "fact": "operationPath",
            "operator": "equal",
            "value": "/quoterequests"
          },
          {
            "fact": "method",
            "operator": "equal",
            "value": "post"
          }
        ]
      },
      "event": {
        "method": null,
        "path": null,
        "params": {
          "body": {
            "quoteId": "{$request.body.quoteId}",
            "transactionId": "{$request.body.transactionId}",
            "transferAmount": "{$request.body.amount}",
            "transferAmountCurrency": "{$request.body.currency}"
          },
          "statusCode": "200",
          "scripts": {
            "scriptingEngine": "postman"
          }
        },
        "type": "FIXED_RESPONSE"
      },
      "type": "response",
      "version": 1
    },
    {
      "ruleId": 10,
      "priority": 1,
      "description": "post /transfers",
      "apiVersion": {
        "minorVersion": 1,
        "majorVersion": 2,
        "type": "mojaloop_connector_outbound",
        "asynchronous": false
      },
      "conditions": {
        "all": [
          {
            "fact": "operationPath",
            "operator": "equal",
            "value": "/transfers"
          },
          {
            "fact": "method",
            "operator": "equal",
            "value": "post"
          }
        ]
      },
      "event": {
        "method": null,
        "path": null,
        "params": {
          "body": {
            "completedTimestamp": "{$environment.completedTimestamp}",
            "homeTransactionId": "123",
            "transferState": "COMMITTED"
          },
          "statusCode": "200",
          "scripts": {
            "exec": [
              "environment.completedTimestamp = new Date().toISOString()"
            ],
            "scriptingEngine": "javascript"
          }
        },
        "type": "FIXED_RESPONSE"
      },
      "type": "response",
      "version": 1
    },
    {
      "ruleId": 11,
      "priority": 1,
      "description": "post /transactionrequests",
      "apiVersion": {
        "minorVersion": 1,
        "majorVersion": 2,
        "type": "mojaloop_connector_backend",
        "asynchronous": true
      },
      "conditions": {
        "all": [
          {
            "fact": "operationPath",
            "operator": "equal",
            "value": "/transactionrequests"
          },
          {
            "fact": "method",
            "operator": "equal",
            "value": "post"
          }
        ]
      },
      "event": {
        "method": null,
        "path": null,
        "params": {
          "body": {
            "homeR2PTransactionId": "cba321",
            "transactionId": "{$function.generic.generateUUID}",
            "transactionRequestState": "RECEIVED"
          },
          "statusCode": "200",
          "scripts": {
            "exec": [
              "const reqBody = JSON.parse(request.body)",
              "const outEndpoint = userConfig.CALLBACK_ENDPOINT",
              "const outReqBody = {",
              "  transactionRequestId: reqBody.transactionRequestId,",
              "  homeR2PTransactionId: 'abc123',",
              "  from: reqBody.to,",
              "  to: reqBody.from,",
              "  amountType: \"RECEIVE\",",
              "  currency: reqBody.currency,",
              "  amount: reqBody.amount,",
              "  scenario: \"DEPOSIT\",",
              "  initiator: reqBody.initiator,",
              "  initiatorType: reqBody.initiatorType,",
              "  note: \"Note sent to Payee.\"",
              "}",
              "try {",
              "  const axioResponse = await axios({",
              "    method: 'post',",
              "    url: outEndpoint + '/requestToPayTransfer',",
              "    data: outReqBody",
              "  });",
              "  res = axioResponse.data;",
              "  responseCode = axioResponse.code || axioResponse.status",
              "} catch (err) {",
              "  console.log(err)",
              "}",
              ""
            ],
            "scriptingEngine": "javascript"
          }
        },
        "type": "MOCK_RESPONSE"
      },
      "type": "response",
      "version": 1
    }
]